import { StreamerbotClient } from '@streamerbot/client';
interface Action {
    id: string;
    name: string;
}
interface Broadcaster {
    id?: string;
    username?: string;
    displayName?: string;
}
export declare class StreamerBotService {
    client: StreamerbotClient | null;
    private isConnecting;
    private connectionPromise;
    constructor();
    connect(address: string, port: number, maxRetries?: number): Promise<void>;
    private _performConnectionWithRetry;
    private _performConnection;
    disconnect(): void;
    isConnected(): boolean;
    isConnectingToStreamerBot(): boolean;
    /**
     * Subscribes to all events from Streamer.bot and registers a callback
     * @param callback The function to call when any event is received
     */
    onEvent(callback: (event: any) => void): void;
    /**
     * Fetches broadcaster information
     */
    getBroadcaster(): Promise<Broadcaster | undefined>;
    /**
     * Fetches all available actions from Streamer.bot
     */
    getActions(): Promise<Action[]>;
    /**
     * Triggers an action in Streamer.bot by its ID or name
     * @param actionIdentifier The ID or name of the action to trigger
     * @param args Optional arguments for the action
     */
    doAction(actionIdentifier: string, args?: Record<string, any>): Promise<void>;
    /**
     * Sends a request generated by the Gemini model.
     * This now acts as a wrapper around the client's methods.
     * @param action The action object generated by Gemini
     */
    executeBotAction(action: {
        type: string;
        args?: Record<string, any>;
    }): Promise<any>;
}
export {};
