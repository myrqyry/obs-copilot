// src/services/streamerBotService.ts

import { StreamerbotClient } from '@streamerbot/client';

// Define our own Action interface based on expected structure
interface Action {
    id: string;
    name: string;
    // Add other properties as needed based on actual response structure
}

// Define our own Broadcaster interface
interface Broadcaster {
    id?: string;
    username?: string;
    displayName?: string;
    // Add other properties as needed based on actual response structure
}

export class StreamerBotService {
    public client: StreamerbotClient | null = null;

    constructor() { }

    async connect(address: string, port: number): Promise<void> {
        try {
            this.client = new StreamerbotClient({
                host: address,
                port: port,
            });

            // Actually connect to Streamer.bot
            await this.client.connect();
        } catch (error) {
            this.client = null;
            throw error;
        }
    }

    disconnect() {
        this.client?.disconnect();
        this.client = null;
    }

    /**
     * Subscribes to all events from Streamer.bot and registers a callback
     * @param callback The function to call when any event is received
     */
    onEvent(callback: (event: any) => void): void {
        if (!this.client) throw new Error('Streamer.bot client is not initialized.');

        // The client's `on` method can listen to all events using '*'
        this.client.on('*', (message) => {
            callback(message.data.event);
        });
        console.log('Subscribed to all Streamer.bot events.');
    }

    /**
     * Fetches broadcaster information
     */
    async getBroadcaster(): Promise<Broadcaster | undefined> {
        if (!this.client) throw new Error('Streamer.bot client is not initialized.');
        return this.client.getBroadcaster() as Broadcaster;
    }

    /**
     * Fetches all available actions from Streamer.bot
     */
    async getActions(): Promise<Action[]> {
        if (!this.client) throw new Error('Streamer.bot client is not initialized.');
        // getActions returns an object, not an array, so extract the actions array
        const response = await this.client.getActions();
        // The response is typically { actions: [...] }
        if (response && Array.isArray(response.actions)) {
            return response.actions;
        }
        // Fallback: return empty array if not found
        return [];
    }

    /**
     * Triggers an action in Streamer.bot by its ID or name
     * @param actionIdentifier The ID or name of the action to trigger
     * @param args Optional arguments for the action
     */
    async doAction(actionIdentifier: string, args: Record<string, any> = {}): Promise<void> {
        if (!this.client) throw new Error('Streamer.bot client is not initialized.');

        // The client's doAction method accepts an object with name or id
        let identifier: { id?: string; name?: string } = {};
        if (actionIdentifier.match(/^[0-9a-f-]{36}$/i)) {
            identifier.id = actionIdentifier;
        } else {
            identifier.name = actionIdentifier;
        }

        await this.client.doAction(identifier, args);
    }

    /**
     * Sends a request generated by the Gemini model.
     * This now acts as a wrapper around the client's methods.
     * @param action The action object generated by Gemini
     */
    async executeBotAction(action: { type: string; args?: Record<string, any> }): Promise<any> {
        if (!this.client) throw new Error('Streamer.bot client is not initialized.');

        switch (action.type) {
            case 'GetActions': {
                // getActions returns an object, not an array
                const response = await this.client.getActions();
                return response;
            }
            case 'DoAction': {
                if (!action.args?.action) throw new Error('DoAction requires an action identifier.');
                return this.client.doAction(action.args.action, action.args.args);
            }
            case 'CreateAction': {
                // For now, CreateAction is not directly supported by the client
                // We'll simulate the action creation by throwing a helpful error
                throw new Error('CreateAction is not currently supported by the Streamer.bot client library. You can create actions manually in Streamer.bot and then use DoAction to trigger them.');
            }
            case 'UpdateAction': {
                throw new Error('UpdateAction is not currently supported by the Streamer.bot client library.');
            }
            case 'DeleteAction': {
                throw new Error('DeleteAction is not currently supported by the Streamer.bot client library.');
            }
            case 'TwitchSendMessage': {
                // This would need to be handled by a pre-existing action in Streamer.bot
                // that handles Twitch chat messages
                if (!action.args?.message) throw new Error('TwitchSendMessage requires a message.');

                // Try to find and trigger a Twitch send message action
                return await this.client.doAction({ name: 'Send Twitch Message' }, {
                    message: action.args.message
                });
            }
            case 'TwitchCreatePoll': {
                // This would need to be handled by a pre-existing action in Streamer.bot
                if (!action.args?.title || !action.args?.choices) throw new Error('TwitchCreatePoll requires title and choices.');

                // Try to find and trigger a Twitch create poll action
                return await this.client.doAction({ name: 'Create Twitch Poll' }, {
                    title: action.args.title,
                    choices: action.args.choices,
                    duration: action.args.duration || 60
                });
            }
            // Add more cases as needed
            default:
                throw new Error(`Unsupported Streamer.bot action type: ${action.type}`);
        }
    }
}
