import { StandardApiItem } from '@/types/assetSearch';

type MapperFunction = (item: any) => StandardApiItem;

export const apiMappers: Record<string, MapperFunction> = {
  unsplash: (item) => ({
    id: item.id,
    title: item.alt_description || 'Unsplash Image',
    url: item.urls.regular,
    thumbnail: item.urls.small,
    source: 'Unsplash',
    author: item.user.name,
    description: item.description,
    tags: item.tags.map((t: any) => t.title),
    dimensions: { width: item.width, height: item.height },
    downloadUrl: item.links.download,
    format: 'jpeg',
  }),
  pexels: (item) => ({
    id: String(item.id),
    title: item.alt || 'Pexels Image',
    url: item.src.large,
    thumbnail: item.src.medium,
    source: 'Pexels',
    author: item.photographer,
    dimensions: { width: item.width, height: item.height },
    downloadUrl: item.src.original,
    format: 'jpeg',
  }),
  pixabay: (item) => ({
    id: String(item.id),
    title: item.tags || 'Pixabay Image',
    url: item.largeImageURL,
    thumbnail: item.webformatURL,
    source: 'Pixabay',
    author: item.user,
    tags: item.tags.split(',').map((t: string) => t.trim()),
    dimensions: { width: item.imageWidth, height: item.imageHeight },
    fileSize: item.imageSize,
    downloadUrl: item.largeImageURL,
    format: 'jpeg',
  }),
  wallhaven: (item) => ({
    id: item.id,
    title: `Wallhaven ${item.id}`,
    url: item.path,
    thumbnail: item.thumbs.small,
    source: 'Wallhaven',
    author: item.uploader?.username || 'Unknown',
    tags: item.tags.map((t: any) => t.name),
    dimensions: { width: item.dimension_x, height: item.dimension_y },
    fileSize: item.file_size,
    format: 'jpeg',
  }),
  giphy: (item) => ({
    id: item.id,
    title: item.title,
    url: item.images.original.url,
    thumbnail: item.images.fixed_height.url,
    source: 'Giphy',
    author: item.user?.display_name || 'Giphy',
    rating: item.rating,
    dimensions: { width: Number(item.images.original.width), height: Number(item.images.original.height) },
    format: 'gif',
  }),
  tenor: (item) => ({
    id: item.id,
    title: item.content_description,
    url: item.media_formats.gif.url,
    thumbnail: item.media_formats.tinygif.url,
    source: 'Tenor',
    author: 'Tenor',
    dimensions: { width: item.media_formats.gif.dims[0], height: item.media_formats.gif.dims[1] },
    format: 'gif',
  }),
  iconfinder: (item) => ({
    id: String(item.icon_id),
    title: item.tags.join(', ') || 'Icon',
    url: item.raster_sizes[item.raster_sizes.length - 1].formats[0].preview_url,
    thumbnail: item.raster_sizes.find((s: any) => s.size === 64)?.formats[0].preview_url || item.raster_sizes[0].formats[0].preview_url,
    source: 'Iconfinder',
    author: item.styles?.[0]?.name || 'Unknown',
    tags: item.tags,
    license: item.license?.name,
    format: 'png',
  }),
  'emoji-api': (item) => ({
    id: item.slug,
    title: item.slug.replace(/-/g, ' '),
    character: item.character,
    source: 'Emoji API',
    author: 'Unicode',
    description: `Unicode: ${item.unicodeName}`,
    tags: [item.group, ...(item.subGroup ? [item.subGroup] : [])],
    format: 'emoji'
  }),
};