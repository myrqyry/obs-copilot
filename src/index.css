/* src/index.css */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Define initial semantic colors using Catppuccin Mocha hex values.
       These are then overridden by `App.tsx` based on user theme selection.
       Using HSL values here to align with custom properties. */
    --background: 240 20% 15%; /* ctp-base */
    --foreground: 226 66% 88%; /* ctp-text */

    --card: 233 12% 31%; /* ctp-surface1 */
    --card-foreground: 226 66% 88%; /* ctp-text */

    --popover: 233 12% 31%; /* ctp-surface1 */
    --popover-foreground: 226 66% 88%; /* ctp-text */

    --primary: 270 80% 85%; /* ctp-mauve (default accent) */
    --primary-foreground: 240 20% 15%; /* ctp-base */

    --secondary: 237 13% 23%; /* ctp-surface0 */
    --secondary-foreground: 227 27% 75%; /* ctp-subtext0 */

    --muted: 230 11% 48%; /* ctp-overlay0 */
    --muted-foreground: 225 42% 86%; /* ctp-subtext1 */

    --accent: 169 56% 76%; /* ctp-teal */
    --accent-foreground: 240 20% 15%; /* ctp-base */

    --destructive: 340 82% 81%; /* ctp-red */
    --destructive-foreground: 240 20% 15%; /* ctp-base */

    --info: 217 91% 76%; /* ctp-blue */
    --info-foreground: 240 20% 15%; /* ctp-base */

    --border: 233 11% 39%; /* ctp-surface2 */
    --input: 237 13% 23%; /* ctp-surface0 */
    --ring: 270 80% 85%; /* ctp-mauve (Primary Accent) */

    --radius: 0.75rem; /* 12px, matches original rounded-lg */ --component-inactive-color: var(--muted-foreground); --component-bg: var(--card); --component-shadow: var(--border); --component-active-bg: var(--secondary); --component-line-inactive-color: var(--border); --component-active-color-default: var(--accent-foreground);
  }

  /* ============================================================
     Chat bubble / message CSS override strategy

     Important background:
     - We avoid using !important on chat bubble backgrounds/borders so that
       inline styles (React's style={{}}) and dynamically computed colors
       (set at the component level) can override them reliably.
     - Using !important here previously caused inline styles to be ignored
       because the stylesheet forced higher precedence. To allow per-message
       theming (and to let user-configured colors apply), these rules are
       intentionally disabled below.
     - If you need a stylesheet-level default, use regular declarations
       (no !important) or increase specificity only as required, rather
       than using !important which breaks inline-style precedence.
     ============================================================ */

  /* The following rules used to include !important which prevented
     inline styles from applying (e.g. when setting style={{ backgroundColor }}).
     They are preserved here as commented blocks so future maintainers can see
     the previous overrides, but they are intentionally inactive.

  .chat-message.bg-card {
    background-color: var(--card) !important;
  }

  .chat-message.border-border {
    border-color: var(--border) !important;
  }
  */

  /* Recommended: If you need defaults, use non-!important fallbacks so inline
     styles still work. Example:

  .chat-message.bg-card {
    background-color: var(--card);
  }

  .chat-message.border-border {
    border-color: var(--border);
  }
  */

  /* Global class for dynamic accent colors (used by MorphingLogos and AnimatedTitleLogos) */
  .dynamic-accent-gradient {
    background: radial-gradient(circle, var(--dynamic-accent), var(--dynamic-secondary-accent));
  }

  /* Global class for the animated title gradient */
  .animated-title-gradient {
    background: linear-gradient(135deg,
        var(--dynamic-accent) 0%,
        var(--dynamic-secondary-accent) 15%,
        var(--dynamic-accent) 30%,
        var(--dynamic-secondary-accent) 45%,
        var(--dynamic-accent) 60%,
        var(--dynamic-secondary-accent) 75%,
        var(--dynamic-accent) 90%,
        var(--dynamic-secondary-accent) 100%);
    background-size: 400% 400%;
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    animation: gradient-shift 12s ease-in-out infinite;
  }
  .theme {
    --color-chart-2: var(--color-chart-2);
    --color-chart-3: var(--color-chart-3);
    --color-chart-4: var(--color-chart-4);
    --color-chart-5: var(--color-chart-5);
  }
  .dark {
    --component-inactive-color: var(--muted-foreground);
    --component-bg: var(--card);
    --component-shadow: var(--border);
    --component-active-bg: var(--secondary);
    --component-line-inactive-color: var(--muted-foreground);
    --component-active-color-default: var(--accent-foreground);
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@theme inline {
  @keyframes iconBounce {
  0%, 100% {
    transform: translateY(0);
    }
  20% {
    transform: translateY(-0.3em);
    }
  40% {
    transform: translateY(0);
    }
  60% {
    transform: translateY(-0.1em);
    }
  80% {
    transform: translateY(0);
    }
  }
}