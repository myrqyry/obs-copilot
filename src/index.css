/* src/index.css */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Define initial semantic colors using Catppuccin Mocha hex values.
       These are then overridden by `App.tsx` based on user theme selection.
       Using HSL values here to align with custom properties. */
    --background: 240 20% 15%; /* ctp-base */
    --foreground: 226 66% 88%; /* ctp-text */

    --card: 233 12% 31%; /* ctp-surface1 */
    --card-foreground: 226 66% 88%; /* ctp-text */

    --popover: 233 12% 31%; /* ctp-surface1 */
    --popover-foreground: 226 66% 88%; /* ctp-text */

    --primary: 270 80% 85%; /* ctp-mauve (default accent) */
    --primary-foreground: 240 20% 15%; /* ctp-base */

    --secondary: 237 13% 23%; /* ctp-surface0 */
    --secondary-foreground: 227 27% 75%; /* ctp-subtext0 */

    --muted: 230 11% 48%; /* ctp-overlay0 */
    --muted-foreground: 225 42% 86%; /* ctp-subtext1 */

    --accent: 169 56% 76%; /* ctp-teal */
    --accent-foreground: 240 20% 15%; /* ctp-base */

    --destructive: 340 82% 81%; /* ctp-red */
    --destructive-foreground: 240 20% 15%; /* ctp-base */

    --info: 217 91% 76%; /* ctp-blue */
    --info-foreground: 240 20% 15%; /* ctp-base */

    --border: 233 11% 39%; /* ctp-surface2 */
    --input: 237 13% 23%; /* ctp-surface0 */
    --ring: 270 80% 85%; /* ctp-mauve (Primary Accent) */

    --radius: 0.75rem; /* 12px, matches original rounded-lg */
    --component-border-color: var(--border);
    --component-inactive-color: var(--muted-foreground);
    --component-bg: var(--card);
    --component-shadow: var(--border);
    --component-active-bg: var(--secondary);
    --component-line-inactive-color: var(--border);
    --component-active-color-default: var(--accent-foreground);

    /* Enhanced accent color variables for better integration */
    --accent-glow: hsl(var(--accent) / 0.3);
    --primary-glow: hsl(var(--primary) / 0.3);
    --accent-subtle: hsl(var(--accent) / 0.1);
    --primary-subtle: hsl(var(--primary) / 0.1);
    --gradient-primary-accent: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)));
    --gradient-accent-primary: linear-gradient(135deg, hsl(var(--accent)), hsl(var(--primary)));
    --shadow-accent: 0 4px 20px hsl(var(--accent) / 0.2);
    --shadow-primary: 0 4px 20px hsl(var(--primary) / 0.2);
    
    /* Overlay and warning variables for template support */
    --warning: 43 74% 66%; /* ctp-yellow */
    --warning-foreground: 240 20% 15%; /* ctp-base */
    --warning-glow: hsl(var(--warning) / 0.3);
    --destructive-glow: hsl(var(--destructive) / 0.3);
    --destructive-subtle: hsl(var(--destructive) / 0.1);
    --background-overlay: hsl(var(--background) / 0.8);
    --shadow-lg: hsl(var(--foreground) / 0.4);
    
    /* Dynamic accent variables with fallbacks to prevent theme transition issues */
    --dynamic-accent: #94e2d5; /* fallback to ctp-teal */
    --dynamic-secondary-accent: #cba6f7; /* fallback to ctp-mauve */
  }

  /* ============================================================
     Chat bubble / message CSS override strategy

     Important background:
     - We avoid using !important on chat bubble backgrounds/borders so that
       inline styles (React's style={{}}) and dynamically computed colors
       (set at the component level) can override them reliably.
     - Using !important here previously caused inline styles to be ignored
       because the stylesheet forced higher precedence. To allow per-message
       theming (and to let user-configured colors apply), these rules are
       intentionally disabled below.
     - If you need a stylesheet-level default, use regular declarations
       (no !important) or increase specificity only as required, rather
       than using !important which breaks inline-style precedence.
     ============================================================ */

  /* The following rules used to include !important which prevented
     inline styles from applying (e.g. when setting style={{ backgroundColor }}).
     They are preserved here as commented blocks so future maintainers can see
     the previous overrides, but they are intentionally inactive.

  .chat-message.bg-card {
    background-color: var(--card) !important;
  }

  .chat-message.border-border {
    border-color: var(--border) !important;
  }
  */

  /* Recommended: If you need defaults, use non-!important fallbacks so inline
     styles still work. Example:

  .chat-message.bg-card {
    background-color: var(--card);
  }

  .chat-message.border-border {
    border-color: var(--border);
  }
  */

  /* Global class for dynamic accent colors (used by MorphingLogos and AnimatedTitleLogos) */
  .dynamic-accent-gradient {
    background: radial-gradient(circle, var(--dynamic-accent), var(--dynamic-secondary-accent));
  }

  /* Global class for the animated title gradient */
  .animated-title-gradient {
    background: linear-gradient(135deg,
        var(--dynamic-accent) 0%,
        var(--dynamic-secondary-accent) 15%,
        var(--dynamic-accent) 30%,
        var(--dynamic-secondary-accent) 45%,
        var(--dynamic-accent) 60%,
        var(--dynamic-secondary-accent) 75%,
        var(--dynamic-accent) 90%,
        var(--dynamic-secondary-accent) 100%);
    background-size: 400% 400%;
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    animation: gradient-shift 12s ease-in-out infinite;
  }
  /* New: global layout elements that consume theme variables */
  .app-header, header, .site-header {
    background: var(--nav-bg);
    color: var(--nav-foreground);
    border-bottom: 1px solid hsl(var(--border));
    box-shadow: var(--shadow-primary);
  }

  .primary-gradient-accent {
    background: var(--nav-accent-gradient);
    color: var(--button-text);
  }

  /* Primary nav helper: use CSS variable for the top/bottom gradient indicator */
  nav[aria-label='Primary'].prime-nav::before {
    background: var(--nav-accent-gradient);
  }

  /* Subtle accent overlay used by header and other surfaces to add theme color without heavy saturation */
  .subtle-accent-overlay {
    position: absolute;
    inset: 0;
    opacity: 0.06;
    pointer-events: none;
    background: var(--nav-accent-gradient);
    mix-blend-mode: overlay;
  }

  /* Buttons and actionable UI - avoid styling all native <button> elements to prevent UI control overrides
     Only apply the themed button treatment to components opting into it via .btn or .button */
  .btn, .button, .themed-button {
    background: linear-gradient(180deg, var(--button-bg), var(--button-bg-accent));
    color: var(--button-text);
    border-radius: var(--radius);
    box-shadow: var(--shadow-accent);
    transition: transform 0.12s ease, box-shadow 0.18s ease, opacity 0.12s ease;
  }

  .btn:hover, .button:hover, .themed-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px hsl(var(--accent) / 0.24);
  }

  /* Tabs / Navigation */
  .tabs, .tab-list, nav[role='tablist'] {
    background: var(--nav-bg);
    color: var(--tab-inactive-text);
    border-radius: calc(var(--radius) + 2px);
  }

  .tab, .tab-button {
    color: var(--tab-inactive-text);
    background: transparent;
    transition: background 0.18s, color 0.18s, box-shadow 0.18s;
  }

  /* Icon coloring for tabs - use CSS variables so theme updates apply immediately */
  .tab-item .tab-icon {
    color: hsl(var(--tab-inactive-text));
    transition: color 0.18s ease, transform 0.12s ease;
  }

  .tab-item[data-active='true'] .tab-icon,
  .tab-item[aria-selected='true'] .tab-icon {
    color: hsl(var(--tab-active-text));
  }

  .tab[aria-selected='true'], .tab-button.active {
    color: var(--tab-active-text);
    background: var(--tab-active-bg);
    box-shadow: var(--shadow-accent);
    border-radius: calc(var(--radius) - 2px);
  }

  /* Cards use semantic card variables */
  .card, .panel {
    background: hsl(var(--component-bg));
    color: hsl(var(--card-foreground));
    border: 1px solid hsl(var(--component-border-color));
    border-radius: var(--radius);
    box-shadow: 0 6px 18px rgba(0,0,0,0.12);
  }

  /* Links and badges should use accent color */
  a, .link {
    color: hsl(var(--accent));
    text-decoration: underline;
  }

  .badge, .accent-pill {
    background: linear-gradient(90deg, hsl(var(--accent)), hsl(var(--primary)));
    color: hsl(var(--accent-foreground));
    border-radius: 999px;
    padding: 0.125rem 0.5rem;
    font-weight: 600;
  }

  /* Focus ring - unify across components */
  :focus {
    outline: 2px solid var(--focus-ring);
    outline-offset: 2px;
    border-radius: 6px;
  }

  /* App-level root background and main split panels */
  .app-root {
    background: linear-gradient(135deg, hsl(var(--background)), hsl(var(--card)));
    color: hsl(var(--foreground));
    min-height: 100vh;
  }

  .main-panel {
    background: transparent;
    color: inherit;
  }

  /* Make header & nav use themed variables */
  header, .app-header, .site-header {
    background: linear-gradient(90deg, hsl(var(--nav-bg)), color-mix(in srgb, hsl(var(--nav-bg)) 92%, transparent));
    color: hsl(var(--nav-foreground));
    border-bottom: 1px solid hsl(var(--border) / 0.6);
  }

  nav.prime-nav {
    background: hsl(var(--nav-bg) / 0.85);
    color: hsl(var(--nav-foreground));
  }

  /* Panels and sidebars should use card variables for consistent look */
  .sidebar, .panel, .workspace {
    background: hsl(var(--component-bg));
    color: hsl(var(--card-foreground));
    border: 1px solid hsl(var(--component-border-color) / 0.7);
    border-radius: calc(var(--radius));
  }
  .theme {
    --color-chart-2: var(--color-chart-2);
    --color-chart-3: var(--color-chart-3);
    --color-chart-4: var(--color-chart-4);
    --color-chart-5: var(--color-chart-5);
  }
  .dark {
    --component-inactive-color: var(--muted-foreground);
    --component-bg: var(--card);
    --component-shadow: var(--border);
    --component-active-bg: var(--secondary);
    --component-line-inactive-color: var(--muted-foreground);
    --component-active-color-default: var(--accent-foreground);
  }
}

/* Chat bubble variable-driven defaults and tuned visuals */
.chat-message {
  /* CSS variable fallbacks (inline styles on elements will override these) */
  --bubble-bg: rgba(30,30,46,0.5);
  --bubble-border: hsl(var(--accent));
  --bubble-text: hsl(var(--accent));
  --bubble-radius: 0.75rem;
  --bubble-border-width: 1.5px;
  --bubble-shadow: 0 6px 20px rgba(0,0,0,0.14);

  background-color: var(--bubble-bg);
  border-color: var(--bubble-border);
  color: var(--bubble-text);
  border-width: var(--bubble-border-width);
  border-style: solid;
  border-radius: var(--bubble-radius);
  box-shadow: var(--bubble-shadow);
  transition: background 0.28s, border-color 0.28s, box-shadow 0.28s, transform 0.18s;
}

/* Glassy variant used when custom background is present */
.chat-bubble-glass {
  backdrop-filter: blur(6px) saturate(120%);
  background-color: rgba(255,255,255,0.06);
}
.chat-bubble-glass-extra-dark {
  backdrop-filter: blur(6px) saturate(120%);
  background-color: rgba(8,8,12,0.6);
}

/* Pop/hover polish for bubbles */
.chat-message.group:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 30px rgba(0,0,0,0.18);
}


@layer base {
  /* Removed global border application to avoid conflicts */
  body {
    @apply bg-background text-foreground;
  }

  /* Custom Scrollbar Styles */
  ::-webkit-scrollbar {
    width: 12px;
    height: 12px;
  }

  ::-webkit-scrollbar-track {
    background: hsl(var(--card));
    border-radius: 10px;
  }

  ::-webkit-scrollbar-thumb {
    background: hsl(var(--muted));
    border-radius: 10px;
    border: 3px solid hsl(var(--card));
  }

  ::-webkit-scrollbar-thumb:hover {
    background: hsl(var(--primary));
  }
}

@theme inline {
  @keyframes iconBounce {
  0%, 100% {
    transform: translateY(0);
    }
  20% {
    transform: translateY(-0.3em);
    }
  40% {
    transform: translateY(0);
    }
  60% {
    transform: translateY(-0.1em);
    }
  80% {
    transform: translateY(0);
    }
  }
}