import Tooltip from '@/components/ui/Tooltip';
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { Textarea } from '@/components/ui/textarea';
import { useConnectionManagerStore } from '@/store/connectionManagerStore';
import { HtmlTemplateService, TemplateConfig } from '@/services/htmlTemplateService';
import { catppuccinAccentColorsHexMap, CatppuccinAccentColorName } from '@/types';
import { SecureHtmlRenderer } from '@/components/ui/SecureHtmlRenderer';
import { handleAppError } from '@/lib/errorUtils'; // Import error utilities

interface HtmlTemplateBuilderProps {
    accentColorName: CatppuccinAccentColorName;
}


const HtmlTemplateBuilder: React.FC<HtmlTemplateBuilderProps> = ({ accentColorName }) => {
    const { obsServiceInstance, currentProgramScene, isConnected } = useConnectionManagerStore();
    const [selectedPreset, setSelectedPreset] = useState<string>('assets-showcase');
    const [customConfig, setCustomConfig] = useState<Partial<TemplateConfig>>({
        layout: 'overlay',
        content: {
            title: 'Custom Stream Element',
            subtitle: 'Generated by Gemini AI',
            body: 'Your custom content here',
        },
        colors: {
            primary: catppuccinAccentColorsHexMap[accentColorName],
            secondary: '#f2cdcd',
            accent: '#94e2d5',
            background: 'rgba(30, 30, 46, 0.9)',
            text: '#cdd6f4',
            border: '#45475a',
        },
        animations: {
            enabled: true,
            speed: 0.3,
            effects: {
                glow: 0,
                rainbow: false,
                pulse: false,
            },
        },
    });
    const [sourceName, setSourceName] = useState('Gemini-Template');
    const [sourceWidth, setSourceWidth] = useState(800);
    const [sourceHeight, setSourceHeight] = useState(600);
    const [isCreating, setIsCreating] = useState(false);
    const [showPreview, setShowPreview] = useState(false);
    const [previewUrl, setPreviewUrl] = useState('');
    const [feedbackMessage, setFeedbackMessage] = useState<string | null>(null);
    const [selectedFile, setSelectedFile] = useState<File | null>(null);
    const [htmlContent, setHtmlContent] = useState('');
    const [customCss, setCustomCss] = useState('');
    const presets = HtmlTemplateService.getPresetTemplates();

    useEffect(() => {
        // Update preview URL when config changes
        setPreviewUrl(HtmlTemplateService.generateTemplateUrl(customConfig));
    }, [customConfig]);

    const handlePresetChange = (presetKey: string) => {
        setSelectedPreset(presetKey);
        const preset = presets[presetKey];
        // Only spread if preset is an object
        if (preset && typeof preset === 'object') {
            setCustomConfig({ ...customConfig, ...preset });
        }
    };

    const handleContentChange = (key: 'title' | 'subtitle' | 'body' | 'customHtml', value: string) => {
      setCustomConfig((prev: Partial<TemplateConfig>) => ({
        ...prev,
        content: {
          ...prev.content,
          [key]: value,
        },
      }));
    };
    
    const handleLayoutChange = (value: TemplateConfig['layout']) => {
      setCustomConfig((prev: Partial<TemplateConfig>) => ({
        ...prev,
        layout: value,
      }));
    };
    
    const handlePositionChange = (value: string) => {
      setCustomConfig((prev: Partial<TemplateConfig>) => ({
        ...prev,
        position: value as TemplateConfig['position'],
      }));
    };
    
    const handleAnimationsChange = (key: 'glow' | 'rainbow' | 'pulse', value: number | boolean) => {
      setCustomConfig((prev: Partial<TemplateConfig>) => ({
        ...prev,
        animations: {
          ...prev.animations,
          effects: {
            ...(prev.animations?.effects || {}),
            [key]: value,
          },
        },
      }));
    };

    const handleCreateBrowserSource = async () => {
        if (!obsServiceInstance || !currentProgramScene) {
            setFeedbackMessage('Please connect to OBS first');
            return;
        }

        setIsCreating(true);
        try {
            await HtmlTemplateService.createBrowserSourceWithTemplate(
                obsServiceInstance,
                sourceName,
                currentProgramScene,
                customConfig, // now includes customHtml and customCss
                sourceWidth,
                sourceHeight
            );
            setFeedbackMessage(`âœ… Browser source "${sourceName}" created successfully!`);
        } catch (error: any) {
            setFeedbackMessage(handleAppError('Failed to create browser source', error));
        } finally {
            setIsCreating(false);
        }
    };

    const handleUpdateExistingSource = async () => {
        if (!obsServiceInstance) {
            setFeedbackMessage('Please connect to OBS first');
            return;
        }

        setIsCreating(true);
        try {
            await HtmlTemplateService.updateBrowserSourceTemplate(
                obsServiceInstance,
                sourceName,
                customConfig
            );
            setFeedbackMessage(`âœ… Browser source "${sourceName}" updated successfully!`);
        } catch (error: any) {
            setFeedbackMessage(handleAppError('Failed to update browser source', error));
        } finally {
            setIsCreating(false);
        }
    };

    const copyTemplateUrl = () => {
        navigator.clipboard.writeText(previewUrl);
        setFeedbackMessage('ðŸ“‹ Template URL copied to clipboard!');
    };

    useEffect(() => {
        if (selectedFile) {
            const reader = new FileReader();
            reader.onload = (event) => {
                setHtmlContent(event.target?.result as string || '');
                setCustomConfig((prev) => ({
                    ...prev,
                    customHtml: event.target?.result as string || '',
                }));
            };
            reader.readAsText(selectedFile);
        }
    }, [selectedFile]);

    useEffect(() => {
        setCustomConfig((prev) => ({
            ...prev,
            customCss,
        }));
    }, [customCss]);

    return (
        <div className="space-y-6 p-4">
            <div className="bg-card text-card-foreground rounded-lg border p-6 space-y-6">
                <div className="space-y-2">
                    <h2 className="text-lg font-semibold">Template Configuration</h2>
                    <p className="text-sm text-muted-foreground">Configure your HTML template settings</p>
                </div>

                {/* Content Section */}
                <div className="space-y-4">
                    <h3 className="text-sm font-semibold border-b pb-2">Content</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                            <label className="text-sm font-medium">Title</label>
                            <Input
                                value={customConfig.content?.title || ''}
                                onChange={(e) => handleContentChange('title', e.target.value)}
                                placeholder="Enter title"
                            />
                        </div>
                        <div className="space-y-2">
                            <label className="text-sm font-medium">Subtitle</label>
                            <Input
                                value={customConfig.content?.subtitle || ''}
                                onChange={(e) => handleContentChange('subtitle', e.target.value)}
                                placeholder="Enter subtitle"
                            />
                        </div>
                    </div>
                    <div className="space-y-2">
                        <label className="text-sm font-medium">Body Text</label>
                        <Textarea
                            value={customConfig.content?.body || ''}
                            onChange={(e) => handleContentChange('body', e.target.value)}
                            placeholder="Enter body content (supports HTML)"
                            className="h-20 resize-none"
                        />
                    </div>
                </div>

                {/* Layout Section */}
                <div className="space-y-4">
                    <h3 className="text-sm font-semibold border-b pb-2">Layout</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                            <label className="text-sm font-medium">Layout Type</label>
                            <Select value={customConfig.layout || 'overlay'} onValueChange={handleLayoutChange}>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select layout" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="overlay">Overlay</SelectItem>
                                    <SelectItem value="fullscreen">Fullscreen</SelectItem>
                                    <SelectItem value="corner">Corner</SelectItem>
                                    <SelectItem value="sidebar">Sidebar</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>
                        {customConfig.layout === 'corner' && (
                            <div className="space-y-2">
                                <label className="text-sm font-medium">Position</label>
                                <Select value={customConfig.position || 'bottom-right'} onValueChange={handlePositionChange}>
                                    <SelectTrigger>
                                        <SelectValue placeholder="Select position" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="top-left">Top Left</SelectItem>
                                        <SelectItem value="top-right">Top Right</SelectItem>
                                        <SelectItem value="bottom-left">Bottom Left</SelectItem>
                                        <SelectItem value="bottom-right">Bottom Right</SelectItem>
                                    </SelectContent>
                                </Select>
                            </div>
                        )}
                    </div>
                </div>

                {/* Presets and Custom Section */}
                <div className="space-y-4">
                    <h3 className="text-sm font-semibold border-b pb-2">Presets & Custom</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="space-y-2">
                            <label className="text-sm font-medium">Preset</label>
                            <Select value={selectedPreset} onValueChange={handlePresetChange}>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select preset" />
                                </SelectTrigger>
                                <SelectContent>
                                    {Object.keys(presets).map((key) => (
                                        <SelectItem key={key} value={key}>
                                            {key.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>
                        <div className="space-y-2">
                            <label className="text-sm font-medium">Load External HTML</label>
                            <Input type="file" accept=".html" onChange={(e) => setSelectedFile(e.target.files?.[0] || null)} />
                        </div>
                        <div className="space-y-2">
                            <label className="text-sm font-medium">Custom CSS</label>
                            <Textarea
                                value={customCss}
                                onChange={(e) => setCustomCss(e.target.value)}
                                placeholder="Enter custom CSS"
                                className="h-16 resize-none"
                            />
                        </div>
                    </div>
                </div>

                {/* Source Settings */}
                <div className="space-y-4">
                    <h3 className="text-sm font-semibold border-b pb-2">Source Settings</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="space-y-2">
                            <label className="text-sm font-medium">Source Name</label>
                            <Input
                                value={sourceName}
                                onChange={(e) => setSourceName(e.target.value)}
                                placeholder="Browser source name"
                            />
                        </div>
                        <div className="space-y-2">
                            <label className="text-sm font-medium">Width</label>
                            <Input
                                type="number"
                                value={sourceWidth.toString()}
                                onChange={(e) => setSourceWidth(parseInt(e.target.value) || 800)}
                                placeholder="800"
                            />
                        </div>
                        <div className="space-y-2">
                            <label className="text-sm font-medium">Height</label>
                            <Input
                                type="number"
                                value={sourceHeight.toString()}
                                onChange={(e) => setSourceHeight(parseInt(e.target.value) || 600)}
                                placeholder="600"
                            />
                        </div>
                    </div>
                </div>

                {/* Animations Section */}
                <div className="space-y-4">
                    <h3 className="text-sm font-semibold border-b pb-2">Animation Effects</h3>
                    <div className="space-y-4">
                        <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                                <Switch
                                    checked={customConfig.animations?.effects?.rainbow || false}
                                    onCheckedChange={(checked) => handleAnimationsChange('rainbow', checked)}
                                />
                                <span className="text-sm">ðŸŒˆ Rainbow</span>
                            </div>
                        </div>
                        <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                                <Switch
                                    checked={customConfig.animations?.effects?.pulse || false}
                                    onCheckedChange={(checked) => handleAnimationsChange('pulse', checked)}
                                />
                                <span className="text-sm">ðŸ’“ Pulse</span>
                            </div>
                        </div>
                        <div className="space-y-2">
                            <label className="text-sm font-medium flex items-center space-x-2">
                                <span>ðŸ”¥ Glow Intensity</span>
                                <span className="text-sm text-muted-foreground">
                                    {customConfig.animations?.effects?.glow || 0}
                                </span>
                            </label>
                            <input
                                type="range"
                                min="0"
                                max="5"
                                step="0.5"
                                value={customConfig.animations?.effects?.glow || 0}
                                onChange={(e) => handleAnimationsChange('glow', parseFloat(e.target.value))}
                                className="w-full h-2 bg-muted rounded-lg appearance-none cursor-pointer slider"
                            />
                        </div>
                    </div>
                </div>

                {/* Actions */}
                <div className="flex flex-wrap gap-2 pt-4 border-t">
                    <Button
                        onClick={handleCreateBrowserSource}
                        disabled={!isConnected || isCreating}
                    >
                        {isCreating ? 'Creating...' : 'âœ¨ Create Source'}
                    </Button>
                    <Button
                        onClick={handleUpdateExistingSource}
                        disabled={!isConnected || isCreating}
                        variant="outline"
                    >
                        {isCreating ? 'Updating...' : 'ðŸ›  Update Source'}
                    </Button>
                    <Button
                        onClick={() => setShowPreview(true)}
                        variant="outline"
                    >
                        ðŸ–¥ Preview
                    </Button>
                    <Button
                        onClick={copyTemplateUrl}
                        variant="outline"
                    >
                        ðŸ“‹ Copy URL
                    </Button>
                </div>

                {feedbackMessage && (
                    <div className="p-3 bg-muted rounded-md mt-4">
                        <p className="text-sm">{feedbackMessage}</p>
                    </div>
                )}
            </div>

            <div className="bg-muted rounded-md p-4">
                <SecureHtmlRenderer htmlContent={htmlContent} />
            </div>

            {/* Preview Modal */}
            {showPreview && (
                <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
                    <div className="bg-card text-card-foreground rounded-lg border max-w-4xl w-full max-h-[90vh] overflow-y-auto">
                        <div className="p-6 border-b">
                            <div className="flex justify-between items-center">
                                <h2 className="text-lg font-semibold">Template Preview</h2>
                                <Button
                                    onClick={() => setShowPreview(false)}
                                    variant="ghost"
                                    size="sm"
                                    className="h-8 w-8 p-0"
                                >
                                    âœ•
                                </Button>
                            </div>
                        </div>
                        <div className="p-6 space-y-4">
                            <div className="space-y-2">
                                <label className="text-sm font-medium">Template URL:</label>
                                <code className="text-xs break-all bg-muted p-2 rounded block whitespace-pre-wrap max-h-20 overflow-y-auto">
                                    {previewUrl}
                                </code>
                            </div>
                            <div className="border rounded-md overflow-hidden">
                                <Tooltip content="Template Preview">
                                    <iframe
                                        src={previewUrl}
                                        width="100%"
                                        height="400"
                                        className="border-none"
                                        title="Template Preview"
                                        sandbox="allow-scripts allow-same-origin"
                                        referrerPolicy="no-referrer"
                                        loading="lazy"
                                    />
                                </Tooltip>
                            </div>
                            <p className="text-xs text-muted-foreground">
                                ðŸ›ˆ This preview shows how your template will look in OBS browser source
                            </p>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default HtmlTemplateBuilder;
