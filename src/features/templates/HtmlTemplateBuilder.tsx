import Tooltip from '@/components/ui/Tooltip';
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/Button';
import { TextInput } from '@/components/common/TextInput';
import { Modal } from '@/components/ui/Modal';
import { useConnectionManagerStore } from '@/store/connectionManagerStore';
import { HtmlTemplateService, TemplateConfig } from '@/services/htmlTemplateService';
import { catppuccinAccentColorsHexMap, CatppuccinAccentColorName } from '@/types';
import SecureHtmlRenderer from '@/components/ui/SecureHtmlRenderer';

interface HtmlTemplateBuilderProps {
    accentColorName: CatppuccinAccentColorName;
}


const HtmlTemplateBuilder: React.FC<HtmlTemplateBuilderProps> = ({ accentColorName }) => {
    const { obsServiceInstance, currentProgramScene, isConnected } = useConnectionManagerStore();
    const [selectedPreset, setSelectedPreset] = useState<string>('assets-showcase');
    const [customConfig, setCustomConfig] = useState<Partial<TemplateConfig>>({
        layout: 'overlay',
        content: {
            title: 'Custom Stream Element',
            subtitle: 'Generated by Gemini AI',
            body: 'Your custom content here',
        },
        colors: {
            primary: catppuccinAccentColorsHexMap[accentColorName],
            secondary: '#f2cdcd',
            accent: '#94e2d5',
            background: 'rgba(30, 30, 46, 0.9)',
            text: '#cdd6f4',
            border: '#45475a',
        },
        animations: {
            enabled: true,
            speed: 0.3,
            effects: {
                glow: 0,
                rainbow: false,
                pulse: false,
            },
        },
    });
    const [sourceName, setSourceName] = useState('Gemini-Template');
    const [sourceWidth, setSourceWidth] = useState(800);
    const [sourceHeight, setSourceHeight] = useState(600);
    const [isCreating, setIsCreating] = useState(false);
    const [showPreview, setShowPreview] = useState(false);
    const [previewUrl, setPreviewUrl] = useState('');
    const [feedbackMessage, setFeedbackMessage] = useState<string | null>(null);
    const [selectedFile, setSelectedFile] = useState<File | null>(null);
    const [htmlContent, setHtmlContent] = useState('');
    const [customCss, setCustomCss] = useState('');
    const presets = HtmlTemplateService.getPresetTemplates();

    useEffect(() => {
        // Update preview URL when config changes
        setPreviewUrl(HtmlTemplateService.generateTemplateUrl(customConfig));
    }, [customConfig]);

    const handlePresetChange = (presetKey: string) => {
        setSelectedPreset(presetKey);
        const preset = presets[presetKey];
        // Only spread if preset is an object
        if (preset && typeof preset === 'object') {
            setCustomConfig({ ...customConfig, ...preset });
        }
    };

    const handleConfigChange = (
        section: keyof TemplateConfig,
        key: string,
        value: any
    ) => {
        setCustomConfig((prev: Partial<TemplateConfig>) => {
            // If section is empty string, update the root config property
            if (!section) {
                return { ...prev, [key]: value };
            }
            return {
                ...prev,
                [section]: {
                    ...((prev[section] as object) || {}),
                    [key]: value,
                },
            };
        });
    };

    const handleCreateBrowserSource = async () => {
        if (!obsServiceInstance || !currentProgramScene) {
            setFeedbackMessage('Please connect to OBS first');
            return;
        }

        setIsCreating(true);
        try {
            await HtmlTemplateService.createBrowserSourceWithTemplate(
                obsServiceInstance,
                sourceName,
                currentProgramScene,
                customConfig, // now includes customHtml and customCss
                sourceWidth,
                sourceHeight
            );
            setFeedbackMessage(`✅ Browser source "${sourceName}" created successfully!`);
        } catch (error: any) {
            console.error('Failed to create browser source:', error);
            setFeedbackMessage(`❌ Failed to create browser source: ${error.message}`);
        } finally {
            setIsCreating(false);
        }
    };

    const handleUpdateExistingSource = async () => {
        if (!obsServiceInstance) {
            setFeedbackMessage('Please connect to OBS first');
            return;
        }

        setIsCreating(true);
        try {
            await HtmlTemplateService.updateBrowserSourceTemplate(
                obsServiceInstance,
                sourceName,
                customConfig
            );
            setFeedbackMessage(`✅ Browser source "${sourceName}" updated successfully!`);
        } catch (error: any) {
            console.error('Failed to update browser source:', error);
            setFeedbackMessage(`❌ Failed to update browser source: ${error.message}`);
        } finally {
            setIsCreating(false);
        }
    };

    const copyTemplateUrl = () => {
        navigator.clipboard.writeText(previewUrl);
        setFeedbackMessage('📋 Template URL copied to clipboard!');
    };

    useEffect(() => {
        if (selectedFile) {
            const reader = new FileReader();
            reader.onload = (event) => {
                setHtmlContent(event.target?.result as string || '');
                setCustomConfig((prev) => ({
                    ...prev,
                    customHtml: event.target?.result as string || '',
                }));
            };
            reader.readAsText(selectedFile);
        }
    }, [selectedFile]);

    useEffect(() => {
        setCustomConfig((prev) => ({
            ...prev,
            customCss,
        }));
    }, [customCss]);

    return (
        <div className="space-y-6">
            <div className="px-2 pb-2 pt-1 space-y-2">
                <div className="flex flex-col md:flex-row gap-2">
                    <div className="flex-1">
                        <label className="block text-xs font-medium mb-1">Title</label>
                        <TextInput
                            value={customConfig.content?.title || ''}
                            onChange={(e) => handleConfigChange('content', 'title', e.target.value)}
                            placeholder="Enter title"
                        />
                    </div>
                    <div className="flex-1">
                        <label className="block text-xs font-medium mb-1">Subtitle</label>
                        <TextInput
                            value={customConfig.content?.subtitle || ''}
                            onChange={(e) => handleConfigChange('content', 'subtitle', e.target.value)}
                            placeholder="Enter subtitle"
                        />
                    </div>
                </div>
                <div>
                    <label className="block text-xs font-medium mb-1">Body Text</label>
                    <textarea
                        value={customConfig.content?.body || ''}
                        onChange={(e) => handleConfigChange('content', 'body', e.target.value)}
                        className="w-full p-1 border border-border rounded-md bg-background text-foreground h-16 resize-none text-xs"
                        placeholder="Enter body content (supports HTML)"
                    />
                </div>
                <div className="flex flex-col md:flex-row gap-2">
                    <div className="flex-1">
                        <label className="block text-xs font-medium mb-1">Layout</label>
                        <select
                            value={customConfig.layout || 'overlay'}
                            onChange={(e) => handleConfigChange('layout', 'layout', e.target.value)}
                            className="w-full p-1 border border-border rounded-md bg-background text-foreground text-xs"
                        >
                            <option value="overlay">Overlay</option>
                            <option value="fullscreen">Fullscreen</option>
                            <option value="corner">Corner</option>
                            <option value="sidebar">Sidebar</option>
                        </select>
                    </div>
                    {customConfig.layout === 'corner' && (
                        <div className="flex-1">
                            <label className="block text-xs font-medium mb-1">Position</label>
                            <select
                                value={customConfig.position || 'bottom-right'}
                                onChange={(e) => handleConfigChange('position', 'position', e.target.value)}
                                className="w-full p-1 border border-border rounded-md bg-background text-foreground text-xs"
                            >
                                <option value="top-left">Top Left</option>
                                <option value="top-right">Top Right</option>
                                <option value="bottom-left">Bottom Left</option>
                                <option value="bottom-right">Bottom Right</option>
                            </select>
                        </div>
                    )}
                </div>
                <div className="flex flex-col md:flex-row gap-2">
                    <div className="flex-1">
                        <label className="block text-xs font-medium mb-1">Preset</label>
                        <select
                            value={selectedPreset}
                            onChange={(e) => handlePresetChange(e.target.value)}
                            className="w-full p-1 border border-border rounded-md bg-background text-foreground text-xs"
                        >
                            {Object.keys(presets).map((key) => (
                                <option key={key} value={key}>
                                    {key.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
                                </option>
                            ))}
                        </select>
                    </div>
                    <div className="flex-1">
                        <label className="block text-xs font-medium mb-1">Load External HTML</label>
                        <input
                            type="file"
                            accept=".html"
                            className="w-full p-1 border border-border rounded-md bg-background text-foreground text-xs"
                            onChange={(e) => {
                                setSelectedFile(e.target.files?.[0] || null);
                            }}
                        />
                    </div>
                    <div className="flex-1">
                        <label className="block text-xs font-medium mb-1">Custom CSS</label>
                        <textarea
                            className="w-full p-1 border border-border rounded-md bg-background text-foreground h-8 resize-none text-xs"
                            placeholder="Enter custom CSS"
                            value={customCss}
                            onChange={(e) => setCustomCss(e.target.value)}
                        />
                    </div>
                </div>
                <div className="flex flex-col md:flex-row gap-2">
                    <div className="flex-1">
                        <label className="block text-xs font-medium mb-1">Source Name</label>
                        <TextInput
                            value={sourceName}
                            onChange={(e) => setSourceName(e.target.value)}
                            placeholder="Browser source name"
                        />
                    </div>
                    <div className="flex-1">
                        <label className="block text-xs font-medium mb-1">Width</label>
                        <TextInput
                            type="number"
                            value={sourceWidth.toString()}
                            onChange={(e) => setSourceWidth(parseInt(e.target.value) || 800)}
                            placeholder="800"
                        />
                    </div>
                    <div className="flex-1">
                        <label className="block text-xs font-medium mb-1">Height</label>
                        <TextInput
                            type="number"
                            value={sourceHeight.toString()}
                            onChange={(e) => setSourceHeight(parseInt(e.target.value) || 600)}
                            placeholder="600"
                        />
                    </div>
                </div>
                <div className="flex flex-col md:flex-row gap-2">
                    <div className="flex-1">
                        <label className="block text-xs font-medium mb-1">Animation Effects</label>
                        <div className="flex gap-2 items-center">
                            <input
                                type="checkbox"
                                checked={customConfig.animations?.effects?.rainbow || false}
                                onChange={(e) => handleConfigChange('animations', 'effects', {
                                    ...customConfig.animations?.effects,
                                    rainbow: e.target.checked,
                                })}
                                className="rounded"
                            />
                            <span className="text-xs">🌈 Rainbow</span>
                            <input
                                type="checkbox"
                                checked={customConfig.animations?.effects?.pulse || false}
                                onChange={(e) => handleConfigChange('animations', 'effects', {
                                    ...customConfig.animations?.effects,
                                    pulse: e.target.checked,
                                })}
                                className="rounded ml-2"
                            />
                            <span className="text-xs">💓 Pulse</span>
                            <label className="text-xs ml-2">🔥 Glow:</label>
                            <input
                                type="range"
                                min="0"
                                max="5"
                                step="0.5"
                                value={customConfig.animations?.effects?.glow || 0}
                                onChange={(e) => handleConfigChange('animations', 'effects', {
                                    ...customConfig.animations?.effects,
                                    glow: parseFloat(e.target.value),
                                })}
                                className="flex-1 mx-1"
                            />
                            <span className="text-xs text-muted-foreground">
                                {customConfig.animations?.effects?.glow || 0}
                            </span>
                        </div>
                    </div>
                </div>
                <div className="flex flex-wrap gap-2 mt-2">
                    <Button
                        onClick={handleCreateBrowserSource}
                        disabled={!isConnected || isCreating}
                        variant="default"
                        size="sm"
                    >
                        {isCreating ? 'Creating...' : '✨ Create'}
                    </Button>
                    <Button
                        onClick={handleUpdateExistingSource}
                        disabled={!isConnected || isCreating}
                        variant="secondary"
                        size="sm"
                    >
                        {isCreating ? 'Updating...' : '🛠 Update'}
                    </Button>
                    <Button
                        onClick={() => setShowPreview(true)}
                        variant="secondary"
                        size="sm"
                    >
                        🖥 Preview
                    </Button>
                    <Button
                        onClick={copyTemplateUrl}
                        variant="secondary"
                        size="sm"
                    >
                        📋 Copy URL
                    </Button>
                </div>
                {feedbackMessage && (
                    <div className="mt-2 p-2 bg-muted rounded-md">
                        <p className="text-xs">{feedbackMessage}</p>
                    </div>
                )}
                <div className="mt-2">
                    <SecureHtmlRenderer htmlContent={htmlContent} customCss={customCss} />
                </div>
            </div>

            {/* Preview Modal */}
            {showPreview && (
                <Modal
                    title="Template Preview"
                    onClose={() => setShowPreview(false)}
                >
                    <div className="space-y-4">
                        <div className="bg-muted p-3 rounded-md">
                            <p className="text-sm font-medium mb-2">Template URL:</p>
                            <code className="text-xs break-all bg-background p-2 rounded block">
                                {previewUrl}
                            </code>
                        </div>
                        <div className="border border-border rounded-md overflow-hidden">
                            <Tooltip content="Template Preview">
                                <iframe
                                    src={previewUrl}
                                    width="100%"
                                    height="400"
                                    className="border-none"
                                    title="Template Preview"
                                />
                            </Tooltip>
                        </div>
                        <div className="text-xs text-muted-foreground">
                            🛈 This preview shows how your template will look in OBS browser source
                        </div>
                    </div>
                </Modal>
            )}
        </div>
    );
};

export default HtmlTemplateBuilder;
